// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpasDom.Server;

namespace SpasDom.Server.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20211119163109_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("spas-dom")
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("SpasDom.Server.Entities.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("PostedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.AnnouncementHouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("HouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("HouseId");

                    b.ToTable("Announcement-House-Links");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.Apartment", b =>
                {
                    b.Property<string>("BusinessAccount")
                        .HasColumnType("TEXT");

                    b.Property<long>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("BusinessAccount");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.ApartmentTenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<long>("TenantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("Apartment-Tenant-Links");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.Competence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Competences");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.House", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Area")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<long>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.HouseApartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BusinessAccount")
                        .HasColumnType("TEXT");

                    b.Property<long>("HouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BusinessAccount")
                        .IsUnique();

                    b.HasIndex("HouseId");

                    b.ToTable("House-Apartment-Links");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.Photo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicUlr")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.Worker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.WorkerCompetence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CompetenceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("WorkerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceId")
                        .IsUnique();

                    b.HasIndex("WorkerId");

                    b.ToTable("Worker-Competence-Links");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.AnnouncementHouse", b =>
                {
                    b.HasOne("SpasDom.Server.Entities.Announcement", "Announcement")
                        .WithMany("Houses")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpasDom.Server.Entities.House", "House")
                        .WithMany()
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("House");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.ApartmentTenant", b =>
                {
                    b.HasOne("SpasDom.Server.Entities.Apartment", "Apartment")
                        .WithMany("Tenants")
                        .HasForeignKey("AccountNumber")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpasDom.Server.Entities.Tenant", "Tenant")
                        .WithOne()
                        .HasForeignKey("SpasDom.Server.Entities.ApartmentTenant", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.HouseApartment", b =>
                {
                    b.HasOne("SpasDom.Server.Entities.Apartment", "Apartment")
                        .WithOne()
                        .HasForeignKey("SpasDom.Server.Entities.HouseApartment", "BusinessAccount")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpasDom.Server.Entities.House", "House")
                        .WithMany("Apartments")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("House");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.WorkerCompetence", b =>
                {
                    b.HasOne("SpasDom.Server.Entities.Competence", "Competence")
                        .WithOne()
                        .HasForeignKey("SpasDom.Server.Entities.WorkerCompetence", "CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpasDom.Server.Entities.Worker", "Worker")
                        .WithMany("Competencies")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competence");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.Announcement", b =>
                {
                    b.Navigation("Houses");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.Apartment", b =>
                {
                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.House", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("SpasDom.Server.Entities.Worker", b =>
                {
                    b.Navigation("Competencies");
                });
#pragma warning restore 612, 618
        }
    }
}
